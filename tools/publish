#!/usr/bin/env python

from lib.post import Post
import config

import getopt
import subprocess
import sys

# print error messages and exit
def shriek(msg):
    print(msg)
    sys.exit(2)

# print the usage of the tool
def usage():
    print(("Usage: publish [options] <post-title>\n"
           "Options:\n"
           "  -h [--help]               Display this list of options\n"
           "  -e [--extra] <key:value>  Set a custom property to be output in the post's header section. Should be of the form --extra=my_key:my_value\n"
           "  -l [--layout] <layout>    Set the layout that the page should use\n"
           "  -t [--type] <type>        Set the type of the post. Can be 'html'|'md'|'markdown'\n"
           "  --date <date>             Set the date of the post. This will be part of the file name and should follow Jekyll's date format of yyyy-mm-dd\n"
           "  --dir <directory>         Set the directory in which to create the new post\n"
           "Arguments:\n"
           "  post-title                The title of the post in Jekyll format eg. 'my-new-post'\n"
        ))

# parse the command line arguments to separate lists of options and arguments
def parseArgs():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "ht:l:e:", ["help", "date=", "dir=", "type=", "layout=", "extra="])
    except getopt.GetoptError as err:
        usage()
        sys.exit(2)
    return (opts, args)

# configure a post from a given list of options
def configurePost(post, opts):
    for option, arg in opts:
        if option in ("-h", "--help"):
            usage()
            sys.exit(2)
        elif option in ("-e", "--extra"):
            extra = arg.split(":")
            if len(extra) != 2:
                shriek("Extras must be of the format '<key>:value'")
            post.addExtra(extra[0], extra[1])
        elif option in ("-l", "--layout"):
            post.layout = arg
        elif option in ("-t", "--type"):
            if arg in ("html", "md", "markdown"):
                post.type = arg
            else:
                shriek("Unknown value for --type: " + arg)
        elif option == "--dir":
            post.outDir = arg

# main program
def main():

    opts, args = parseArgs()

    # we need at least one argument for the post's title
    if len(args) < 1:
        usage()
        sys.exit(2)

    # create the new post
    post = Post(args[0])

    # set the defaults from the config
    post.type = config.type
    post.layout = config.layout

    # configure the post using the command line options
    configurePost(post, opts)

    # create the actual file
    try:
        post.create()
    except Exception, e:
        shriek(e)

    editor = config.editor
    if editor:
        subprocess.call([editor, post.getFilePath()])
    else:
        print("New post created:\n{}".format(post.getFilePath()))

if __name__ == "__main__":
    main()


